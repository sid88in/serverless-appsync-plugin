// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Caching Custom configuration 1`] = `
Object {
  "GraphQlCaching": Object {
    "Properties": Object {
      "ApiCachingBehavior": "FULL_REQUEST_CACHING",
      "ApiId": Object {
        "Fn::GetAtt": Array [
          "GraphQlApi",
          "ApiId",
        ],
      },
      "AtRestEncryptionEnabled": true,
      "TransitEncryptionEnabled": true,
      "Ttl": 500,
      "Type": "T2_MEDIUM",
    },
    "Type": "AWS::AppSync::ApiCache",
  },
}
`;

exports[`Caching Disabled 1`] = `Object {}`;

exports[`Caching Minimum configuration 1`] = `
Object {
  "GraphQlCaching": Object {
    "Properties": Object {
      "ApiCachingBehavior": "FULL_REQUEST_CACHING",
      "ApiId": Object {
        "Fn::GetAtt": Array [
          "GraphQlApi",
          "ApiId",
        ],
      },
      "AtRestEncryptionEnabled": false,
      "TransitEncryptionEnabled": false,
      "Ttl": 3600,
      "Type": "T2_SMALL",
    },
    "Type": "AWS::AppSync::ApiCache",
  },
}
`;

exports[`Caching Resolver custom config 1`] = `
Object {
  "GraphQlResolverQueryfield": Object {
    "DependsOn": "GraphQlSchema",
    "Properties": Object {
      "ApiId": Object {
        "Fn::GetAtt": Array [
          "GraphQlApi",
          "ApiId",
        ],
      },
      "CachingConfig": Object {
        "CachingKeys": Array [
          "$context.identity.sub",
          "$context.arguments.id",
        ],
        "Ttl": 1000,
      },
      "DataSourceName": Object {
        "Fn::GetAtt": Array [
          "GraphQlDsds",
          "Name",
        ],
      },
      "FieldName": "field",
      "Kind": "UNIT",
      "RequestMappingTemplate": "Content: mapping-templates/Query.field.request.vtl",
      "ResponseMappingTemplate": "Content: mapping-templates/Query.field.response.vtl",
      "TypeName": "Query",
    },
    "Type": "AWS::AppSync::Resolver",
  },
}
`;

exports[`Caching Resolver min config 1`] = `
Object {
  "GraphQlResolverQueryfield": Object {
    "DependsOn": "GraphQlSchema",
    "Properties": Object {
      "ApiId": Object {
        "Fn::GetAtt": Array [
          "GraphQlApi",
          "ApiId",
        ],
      },
      "CachingConfig": Object {
        "Ttl": 3600,
      },
      "DataSourceName": Object {
        "Fn::GetAtt": Array [
          "GraphQlDsds",
          "Name",
        ],
      },
      "FieldName": "field",
      "Kind": "UNIT",
      "RequestMappingTemplate": "Content: mapping-templates/Query.field.request.vtl",
      "ResponseMappingTemplate": "Content: mapping-templates/Query.field.response.vtl",
      "TypeName": "Query",
    },
    "Type": "AWS::AppSync::Resolver",
  },
}
`;

exports[`Caching Resolver with fallback 1`] = `
Object {
  "GraphQlResolverQueryfield": Object {
    "DependsOn": "GraphQlSchema",
    "Properties": Object {
      "ApiId": Object {
        "Fn::GetAtt": Array [
          "GraphQlApi",
          "ApiId",
        ],
      },
      "CachingConfig": Object {
        "CachingKeys": Array [
          "$context.identity.sub",
          "$context.arguments.id",
        ],
        "Ttl": 2000,
      },
      "DataSourceName": Object {
        "Fn::GetAtt": Array [
          "GraphQlDsds",
          "Name",
        ],
      },
      "FieldName": "field",
      "Kind": "UNIT",
      "RequestMappingTemplate": "Content: mapping-templates/Query.field.request.vtl",
      "ResponseMappingTemplate": "Content: mapping-templates/Query.field.response.vtl",
      "TypeName": "Query",
    },
    "Type": "AWS::AppSync::Resolver",
  },
}
`;

exports[`Delta sync custom config works 1`] = `
Object {
  "GraphQlDsDynamoDbSource": Object {
    "Properties": Object {
      "ApiId": Object {
        "Fn::GetAtt": Array [
          "GraphQlApi",
          "ApiId",
        ],
      },
      "Description": undefined,
      "DynamoDBConfig": Object {
        "AwsRegion": "us-east-1",
        "DeltaSyncConfig": Object {
          "BaseTableTTL": 10,
          "DeltaSyncTableName": "myDeltaSynTable",
          "DeltaSyncTableTTL": 30,
        },
        "TableName": "myTable",
        "UseCallerCredentials": false,
        "Versioned": true,
      },
      "Name": "DynamoDbSource",
      "ServiceRoleArn": "arn:aws:iam::123456789012:role/service-role/myDynamoDbRole",
      "Type": "AMAZON_DYNAMODB",
    },
    "Type": "AWS::AppSync::DataSource",
  },
}
`;

exports[`Delta sync missing config throws an error 1`] = `"You must specify \`deltaSyncConfig\` for Delta Sync configuration."`;

exports[`Delta sync missing tableName throws an error 1`] = `"You must specify \`deltaSyncTableName\` for Delta Sync configuration."`;

exports[`Delta sync not versioned 1`] = `
Object {
  "GraphQlDsDynamoDbSource": Object {
    "Properties": Object {
      "ApiId": Object {
        "Fn::GetAtt": Array [
          "GraphQlApi",
          "ApiId",
        ],
      },
      "Description": undefined,
      "DynamoDBConfig": Object {
        "AwsRegion": "us-east-1",
        "TableName": "myTable",
        "UseCallerCredentials": false,
        "Versioned": false,
      },
      "Name": "DynamoDbSource",
      "ServiceRoleArn": "arn:aws:iam::123456789012:role/service-role/myDynamoDbRole",
      "Type": "AMAZON_DYNAMODB",
    },
    "Type": "AWS::AppSync::DataSource",
  },
}
`;

exports[`Delta sync with default TTL values 1`] = `
Object {
  "GraphQlDsDynamoDbSource": Object {
    "Properties": Object {
      "ApiId": Object {
        "Fn::GetAtt": Array [
          "GraphQlApi",
          "ApiId",
        ],
      },
      "Description": undefined,
      "DynamoDBConfig": Object {
        "AwsRegion": "us-east-1",
        "DeltaSyncConfig": Object {
          "BaseTableTTL": 0,
          "DeltaSyncTableName": "myDeltaSynTable",
          "DeltaSyncTableTTL": 60,
        },
        "TableName": "myTable",
        "UseCallerCredentials": false,
        "Versioned": true,
      },
      "Name": "DynamoDbSource",
      "ServiceRoleArn": "arn:aws:iam::123456789012:role/service-role/myDynamoDbRole",
      "Type": "AMAZON_DYNAMODB",
    },
    "Type": "AWS::AppSync::DataSource",
  },
}
`;

exports[`SyncConfig Uses advanced config 1`] = `
Object {
  "GraphQlResolverQueryfield": Object {
    "DependsOn": "GraphQlSchema",
    "Properties": Object {
      "ApiId": Object {
        "Fn::GetAtt": Array [
          "GraphQlApi",
          "ApiId",
        ],
      },
      "DataSourceName": Object {
        "Fn::GetAtt": Array [
          "GraphQlDsDynamoDbSource",
          "Name",
        ],
      },
      "FieldName": "field",
      "Kind": "UNIT",
      "RequestMappingTemplate": "Content: mapping-templates/Query.field.request.vtl",
      "ResponseMappingTemplate": "Content: mapping-templates/Query.field.response.vtl",
      "SyncConfig": Object {
        "ConflictDetection": "VERSION",
        "ConflictHandler": "AUTOMERGE",
      },
      "TypeName": "Query",
    },
    "Type": "AWS::AppSync::Resolver",
  },
}
`;

exports[`SyncConfig Uses default 1`] = `
Object {
  "GraphQlResolverQueryfield": Object {
    "DependsOn": "GraphQlSchema",
    "Properties": Object {
      "ApiId": Object {
        "Fn::GetAtt": Array [
          "GraphQlApi",
          "ApiId",
        ],
      },
      "DataSourceName": Object {
        "Fn::GetAtt": Array [
          "GraphQlDsDynamoDbSource",
          "Name",
        ],
      },
      "FieldName": "field",
      "Kind": "UNIT",
      "RequestMappingTemplate": "Content: mapping-templates/Query.field.request.vtl",
      "ResponseMappingTemplate": "Content: mapping-templates/Query.field.response.vtl",
      "SyncConfig": Object {
        "ConflictDetection": "VERSION",
      },
      "TypeName": "Query",
    },
    "Type": "AWS::AppSync::Resolver",
  },
}
`;

exports[`SyncConfig Uses lambda config 1`] = `
Object {
  "GraphQlResolverQueryfield": Object {
    "DependsOn": "GraphQlSchema",
    "Properties": Object {
      "ApiId": Object {
        "Fn::GetAtt": Array [
          "GraphQlApi",
          "ApiId",
        ],
      },
      "DataSourceName": Object {
        "Fn::GetAtt": Array [
          "GraphQlDsDynamoDbSource",
          "Name",
        ],
      },
      "FieldName": "field",
      "Kind": "UNIT",
      "RequestMappingTemplate": "Content: mapping-templates/Query.field.request.vtl",
      "ResponseMappingTemplate": "Content: mapping-templates/Query.field.response.vtl",
      "SyncConfig": Object {
        "ConflictDetection": "VERSION",
        "ConflictHandler": "LAMBDA",
        "LambdaConflictHandlerConfig": Object {
          "LambdaConflictHandlerArn": Object {
            "Fn::GetAtt": Array [
              "SyncLambdaLambdaFunction",
              "Arn",
            ],
          },
        },
      },
      "TypeName": "Query",
    },
    "Type": "AWS::AppSync::Resolver",
  },
}
`;

exports[`SyncConfig Uses lambda config with ARN 1`] = `
Object {
  "GraphQlResolverQueryfield": Object {
    "DependsOn": "GraphQlSchema",
    "Properties": Object {
      "ApiId": Object {
        "Fn::GetAtt": Array [
          "GraphQlApi",
          "ApiId",
        ],
      },
      "DataSourceName": Object {
        "Fn::GetAtt": Array [
          "GraphQlDsDynamoDbSource",
          "Name",
        ],
      },
      "FieldName": "field",
      "Kind": "UNIT",
      "RequestMappingTemplate": "Content: mapping-templates/Query.field.request.vtl",
      "ResponseMappingTemplate": "Content: mapping-templates/Query.field.response.vtl",
      "SyncConfig": Object {
        "ConflictDetection": "VERSION",
        "ConflictHandler": "LAMBDA",
        "LambdaConflictHandlerConfig": Object {
          "LambdaConflictHandlerArn": "arn:aws:lambda:us-east-1:123456789:syncLambda",
        },
      },
      "TypeName": "Query",
    },
    "Type": "AWS::AppSync::Resolver",
  },
}
`;

exports[`SyncConfig Uses no sync config 1`] = `
Object {
  "GraphQlResolverQueryfield": Object {
    "DependsOn": "GraphQlSchema",
    "Properties": Object {
      "ApiId": Object {
        "Fn::GetAtt": Array [
          "GraphQlApi",
          "ApiId",
        ],
      },
      "DataSourceName": Object {
        "Fn::GetAtt": Array [
          "GraphQlDsDynamoDbSource",
          "Name",
        ],
      },
      "FieldName": "field",
      "Kind": "UNIT",
      "RequestMappingTemplate": "Content: mapping-templates/Query.field.request.vtl",
      "ResponseMappingTemplate": "Content: mapping-templates/Query.field.response.vtl",
      "TypeName": "Query",
    },
    "Type": "AWS::AppSync::Resolver",
  },
}
`;

exports[`Templates Should use automatic template when no default and no custom 1`] = `
Object {
  "GraphQlResolverQueryfield": Object {
    "DependsOn": "GraphQlSchema",
    "Properties": Object {
      "ApiId": Object {
        "Fn::GetAtt": Array [
          "GraphQlApi",
          "ApiId",
        ],
      },
      "DataSourceName": Object {
        "Fn::GetAtt": Array [
          "GraphQlDsds",
          "Name",
        ],
      },
      "FieldName": "field",
      "Kind": "UNIT",
      "RequestMappingTemplate": "Content: mapping-templates/Query.field.request.vtl",
      "ResponseMappingTemplate": "Content: mapping-templates/Query.field.response.vtl",
      "TypeName": "Query",
    },
    "Type": "AWS::AppSync::Resolver",
  },
}
`;

exports[`Templates Should use automatic template when null, even if there is a default 1`] = `
Object {
  "GraphQlResolverQueryfield": Object {
    "DependsOn": "GraphQlSchema",
    "Properties": Object {
      "ApiId": Object {
        "Fn::GetAtt": Array [
          "GraphQlApi",
          "ApiId",
        ],
      },
      "DataSourceName": Object {
        "Fn::GetAtt": Array [
          "GraphQlDsds",
          "Name",
        ],
      },
      "FieldName": "field",
      "Kind": "UNIT",
      "RequestMappingTemplate": "Content: mapping-templates/Query.field.request.vtl",
      "ResponseMappingTemplate": "Content: mapping-templates/Query.field.response.vtl",
      "TypeName": "Query",
    },
    "Type": "AWS::AppSync::Resolver",
  },
}
`;

exports[`Templates Should use defaultMappingTemplates 1`] = `
Object {
  "GraphQlResolverQueryfield": Object {
    "DependsOn": "GraphQlSchema",
    "Properties": Object {
      "ApiId": Object {
        "Fn::GetAtt": Array [
          "GraphQlApi",
          "ApiId",
        ],
      },
      "DataSourceName": Object {
        "Fn::GetAtt": Array [
          "GraphQlDsds",
          "Name",
        ],
      },
      "FieldName": "field",
      "Kind": "UNIT",
      "RequestMappingTemplate": "Content: mapping-templates/request.default.vtl",
      "ResponseMappingTemplate": "Content: mapping-templates/response.default.vtl",
      "TypeName": "Query",
    },
    "Type": "AWS::AppSync::Resolver",
  },
}
`;

exports[`Templates Should use specified template when defaultMappingTemplates are false 1`] = `
Object {
  "GraphQlResolverQueryfield": Object {
    "DependsOn": "GraphQlSchema",
    "Properties": Object {
      "ApiId": Object {
        "Fn::GetAtt": Array [
          "GraphQlApi",
          "ApiId",
        ],
      },
      "DataSourceName": Object {
        "Fn::GetAtt": Array [
          "GraphQlDsds",
          "Name",
        ],
      },
      "FieldName": "field",
      "Kind": "UNIT",
      "RequestMappingTemplate": "Content: mapping-templates/my.request.template.tpl",
      "ResponseMappingTemplate": "Content: mapping-templates/my.response.template.tpl",
      "TypeName": "Query",
    },
    "Type": "AWS::AppSync::Resolver",
  },
}
`;

exports[`Templates Should use specified templates 1`] = `
Object {
  "GraphQlResolverQueryfield": Object {
    "DependsOn": "GraphQlSchema",
    "Properties": Object {
      "ApiId": Object {
        "Fn::GetAtt": Array [
          "GraphQlApi",
          "ApiId",
        ],
      },
      "DataSourceName": Object {
        "Fn::GetAtt": Array [
          "GraphQlDsds",
          "Name",
        ],
      },
      "FieldName": "field",
      "Kind": "UNIT",
      "RequestMappingTemplate": "Content: mapping-templates/my.request.template.tpl",
      "ResponseMappingTemplate": "Content: mapping-templates/my.response.template.tpl",
      "TypeName": "Query",
    },
    "Type": "AWS::AppSync::Resolver",
  },
}
`;

exports[`WAF should generate API key WAF config 1`] = `
Object {
  "GraphQlWaf": Object {
    "Properties": Object {
      "DefaultAction": Object {
        "Allow": Object {},
      },
      "Description": "ACL rules for AppSync api",
      "Name": "apiWaf",
      "Rules": Array [
        Object {
          "Action": Object {
            "Block": Object {},
          },
          "Name": "UsOnly",
          "Priority": 100,
          "Statement": Object {
            "AndStatement": Object {
              "Statements": Array [
                Object {
                  "NotStatement": Object {
                    "Statement": Object {
                      "GeoMatchStatement": Object {
                        "CountryCodes": Array [
                          "US",
                        ],
                      },
                    },
                  },
                },
                Object {
                  "ByteMatchStatement": Object {
                    "FieldToMatch": Object {
                      "SingleHeader": Object {
                        "Name": "X-Api-key",
                      },
                    },
                    "PositionalConstraint": "EXACTLY",
                    "SearchString": Object {
                      "Fn::GetAtt": Array [
                        "GraphQlApiKeyGeoLimitedKey",
                        "ApiKey",
                      ],
                    },
                    "TextTransformations": Array [
                      Object {
                        "Priority": 0,
                        "Type": "LOWERCASE",
                      },
                    ],
                  },
                },
              ],
            },
          },
          "VisibilityConfig": Object {
            "CloudWatchMetricsEnabled": true,
            "MetricName": "UsOnly",
            "SampledRequestsEnabled": true,
          },
        },
        Object {
          "Action": Object {
            "Block": Object {},
          },
          "Name": "Throttle",
          "Priority": 1,
          "Statement": Object {
            "RateBasedStatement": Object {
              "AggregateKeyType": "IP",
              "Limit": 500,
              "ScopeDownStatement": Object {
                "ByteMatchStatement": Object {
                  "FieldToMatch": Object {
                    "SingleHeader": Object {
                      "Name": "X-Api-key",
                    },
                  },
                  "PositionalConstraint": "EXACTLY",
                  "SearchString": Object {
                    "Fn::GetAtt": Array [
                      "GraphQlApiKeyThrottledKey",
                      "ApiKey",
                    ],
                  },
                  "TextTransformations": Array [
                    Object {
                      "Priority": 0,
                      "Type": "LOWERCASE",
                    },
                  ],
                },
              },
            },
          },
          "VisibilityConfig": Object {
            "CloudWatchMetricsEnabled": true,
            "MetricName": "Throttle",
            "SampledRequestsEnabled": true,
          },
        },
        Object {
          "Action": Object {
            "Block": Object {},
          },
          "Name": "Throttle",
          "Priority": 1,
          "Statement": Object {
            "RateBasedStatement": Object {
              "AggregateKeyType": "IP",
              "Limit": 500,
              "ScopeDownStatement": Object {
                "AndStatement": Object {
                  "Statements": Array [
                    Object {
                      "NotStatement": Object {
                        "Statement": Object {
                          "GeoMatchStatement": Object {
                            "CountryCodes": Array [
                              "US",
                            ],
                          },
                        },
                      },
                    },
                    Object {
                      "ByteMatchStatement": Object {
                        "FieldToMatch": Object {
                          "SingleHeader": Object {
                            "Name": "X-Api-key",
                          },
                        },
                        "PositionalConstraint": "EXACTLY",
                        "SearchString": Object {
                          "Fn::GetAtt": Array [
                            "GraphQlApiKeyThrottledKeyWithScope",
                            "ApiKey",
                          ],
                        },
                        "TextTransformations": Array [
                          Object {
                            "Priority": 0,
                            "Type": "LOWERCASE",
                          },
                        ],
                      },
                    },
                  ],
                },
              },
            },
          },
          "VisibilityConfig": Object {
            "CloudWatchMetricsEnabled": true,
            "MetricName": "Throttle",
            "SampledRequestsEnabled": true,
          },
        },
      ],
      "Scope": "REGIONAL",
      "Tags": undefined,
      "VisibilityConfig": Object {
        "CloudWatchMetricsEnabled": true,
        "MetricName": "apiWaf",
        "SampledRequestsEnabled": true,
      },
    },
    "Type": "AWS::WAFv2::WebACL",
  },
  "GraphQlWafAssoc": Object {
    "Properties": Object {
      "ResourceArn": Object {
        "Fn::GetAtt": Array [
          "GraphQlApi",
          "Arn",
        ],
      },
      "WebACLArn": Object {
        "Fn::GetAtt": Array [
          "GraphQlWaf",
          "Arn",
        ],
      },
    },
    "Type": "AWS::WAFv2::WebACLAssociation",
  },
}
`;

exports[`WAF should generate API key WAF with default preset rules 1`] = `
Object {
  "GraphQlWaf": Object {
    "Properties": Object {
      "DefaultAction": Object {
        "Allow": Object {},
      },
      "Description": "ACL rules for AppSync api",
      "Name": "apiWaf",
      "Rules": Array [
        Object {
          "Action": Object {
            "Block": Object {},
          },
          "Name": "MyKeyThrottle",
          "Priority": 100,
          "Statement": Object {
            "RateBasedStatement": Object {
              "AggregateKeyType": "IP",
              "ForwardedIPConfig": undefined,
              "Limit": 100,
              "ScopeDownStatement": Object {
                "ByteMatchStatement": Object {
                  "FieldToMatch": Object {
                    "SingleHeader": Object {
                      "Name": "X-Api-key",
                    },
                  },
                  "PositionalConstraint": "EXACTLY",
                  "SearchString": Object {
                    "Fn::GetAtt": Array [
                      "GraphQlApiKeyMyKey",
                      "ApiKey",
                    ],
                  },
                  "TextTransformations": Array [
                    Object {
                      "Priority": 0,
                      "Type": "LOWERCASE",
                    },
                  ],
                },
              },
            },
          },
          "VisibilityConfig": Object {
            "CloudWatchMetricsEnabled": true,
            "MetricName": "MyKeyThrottle",
            "SampledRequestsEnabled": true,
          },
        },
        Object {
          "Action": Object {
            "Block": Object {},
          },
          "Name": "MyKeyDisableIntrospection",
          "Priority": 101,
          "Statement": Object {
            "AndStatement": Object {
              "Statements": Array [
                Object {
                  "ByteMatchStatement": Object {
                    "FieldToMatch": Object {
                      "Body": Object {},
                    },
                    "PositionalConstraint": "CONTAINS",
                    "SearchString": "__schema",
                    "TextTransformations": Array [
                      Object {
                        "Priority": 0,
                        "Type": "COMPRESS_WHITE_SPACE",
                      },
                    ],
                  },
                },
                Object {
                  "ByteMatchStatement": Object {
                    "FieldToMatch": Object {
                      "SingleHeader": Object {
                        "Name": "X-Api-key",
                      },
                    },
                    "PositionalConstraint": "EXACTLY",
                    "SearchString": Object {
                      "Fn::GetAtt": Array [
                        "GraphQlApiKeyMyKey",
                        "ApiKey",
                      ],
                    },
                    "TextTransformations": Array [
                      Object {
                        "Priority": 0,
                        "Type": "LOWERCASE",
                      },
                    ],
                  },
                },
              ],
            },
          },
          "VisibilityConfig": Object {
            "CloudWatchMetricsEnabled": true,
            "MetricName": "MyKeyDisableIntrospection",
            "SampledRequestsEnabled": true,
          },
        },
      ],
      "Scope": "REGIONAL",
      "Tags": undefined,
      "VisibilityConfig": Object {
        "CloudWatchMetricsEnabled": true,
        "MetricName": "apiWaf",
        "SampledRequestsEnabled": true,
      },
    },
    "Type": "AWS::WAFv2::WebACL",
  },
  "GraphQlWafAssoc": Object {
    "Properties": Object {
      "ResourceArn": Object {
        "Fn::GetAtt": Array [
          "GraphQlApi",
          "Arn",
        ],
      },
      "WebACLArn": Object {
        "Fn::GetAtt": Array [
          "GraphQlWaf",
          "Arn",
        ],
      },
    },
    "Type": "AWS::WAFv2::WebACLAssociation",
  },
}
`;

exports[`WAF should generate WAF config 1`] = `
Object {
  "GraphQlWaf": Object {
    "Properties": Object {
      "DefaultAction": Object {
        "Allow": Object {},
      },
      "Description": "ACL rules for AppSync api",
      "Name": "apiWaf",
      "Rules": Array [
        Object {
          "Action": Object {
            "Allow": Object {},
          },
          "Name": "UsOnly",
          "Priority": 100,
          "Statement": Object {
            "NotStatement": Object {
              "Statement": Object {
                "GeoMatchStatement": Object {
                  "CountryCodes": Array [
                    "US",
                  ],
                },
              },
            },
          },
          "VisibilityConfig": Object {
            "CloudWatchMetricsEnabled": true,
            "MetricName": "usOnlyWafRule",
            "SampledRequestsEnabled": true,
          },
        },
      ],
      "Scope": "REGIONAL",
      "Tags": undefined,
      "VisibilityConfig": Object {
        "CloudWatchMetricsEnabled": true,
        "MetricName": "apiWaf",
        "SampledRequestsEnabled": true,
      },
    },
    "Type": "AWS::WAFv2::WebACL",
  },
  "GraphQlWafAssoc": Object {
    "Properties": Object {
      "ResourceArn": Object {
        "Fn::GetAtt": Array [
          "GraphQlApi",
          "Arn",
        ],
      },
      "WebACLArn": Object {
        "Fn::GetAtt": Array [
          "GraphQlWaf",
          "Arn",
        ],
      },
    },
    "Type": "AWS::WAFv2::WebACLAssociation",
  },
}
`;

exports[`WAF should generate a WAF default throttle rule 1`] = `
Object {
  "GraphQlWaf": Object {
    "Properties": Object {
      "DefaultAction": Object {
        "Allow": Object {},
      },
      "Description": "ACL rules for AppSync api",
      "Name": "apiWaf",
      "Rules": Array [
        Object {
          "Action": Object {
            "Block": Object {},
          },
          "Name": "BaseThrottle",
          "Priority": 100,
          "Statement": Object {
            "RateBasedStatement": Object {
              "AggregateKeyType": "IP",
              "ForwardedIPConfig": undefined,
              "Limit": 100,
            },
          },
          "VisibilityConfig": Object {
            "CloudWatchMetricsEnabled": true,
            "MetricName": "BaseThrottle",
            "SampledRequestsEnabled": true,
          },
        },
      ],
      "Scope": "REGIONAL",
      "Tags": undefined,
      "VisibilityConfig": Object {
        "CloudWatchMetricsEnabled": true,
        "MetricName": "apiWaf",
        "SampledRequestsEnabled": true,
      },
    },
    "Type": "AWS::WAFv2::WebACL",
  },
  "GraphQlWafAssoc": Object {
    "Properties": Object {
      "ResourceArn": Object {
        "Fn::GetAtt": Array [
          "GraphQlApi",
          "Arn",
        ],
      },
      "WebACLArn": Object {
        "Fn::GetAtt": Array [
          "GraphQlWaf",
          "Arn",
        ],
      },
    },
    "Type": "AWS::WAFv2::WebACLAssociation",
  },
}
`;

exports[`WAF should generate a WAF throttle rule with FORWARDED_IP 1`] = `
Object {
  "GraphQlWaf": Object {
    "Properties": Object {
      "DefaultAction": Object {
        "Allow": Object {},
      },
      "Description": "ACL rules for AppSync api",
      "Name": "apiWaf",
      "Rules": Array [
        Object {
          "Action": Object {
            "Block": Object {},
          },
          "Name": "BaseThrottle",
          "Priority": 100,
          "Statement": Object {
            "RateBasedStatement": Object {
              "AggregateKeyType": "FORWARDED_IP",
              "ForwardedIPConfig": Object {
                "FallbackBehavior": "MATCH",
                "HeaderName": "X-Forwarded-For",
              },
              "Limit": 300,
            },
          },
          "VisibilityConfig": Object {
            "CloudWatchMetricsEnabled": true,
            "MetricName": "BaseThrottle",
            "SampledRequestsEnabled": true,
          },
        },
      ],
      "Scope": "REGIONAL",
      "Tags": undefined,
      "VisibilityConfig": Object {
        "CloudWatchMetricsEnabled": true,
        "MetricName": "apiWaf",
        "SampledRequestsEnabled": true,
      },
    },
    "Type": "AWS::WAFv2::WebACL",
  },
  "GraphQlWafAssoc": Object {
    "Properties": Object {
      "ResourceArn": Object {
        "Fn::GetAtt": Array [
          "GraphQlApi",
          "Arn",
        ],
      },
      "WebACLArn": Object {
        "Fn::GetAtt": Array [
          "GraphQlWaf",
          "Arn",
        ],
      },
    },
    "Type": "AWS::WAFv2::WebACLAssociation",
  },
}
`;

exports[`WAF should generate a WAF throttle rule with FORWARDED_IP and config 1`] = `
Object {
  "GraphQlWaf": Object {
    "Properties": Object {
      "DefaultAction": Object {
        "Allow": Object {},
      },
      "Description": "ACL rules for AppSync api",
      "Name": "apiWaf",
      "Rules": Array [
        Object {
          "Action": Object {
            "Block": Object {},
          },
          "Name": "BaseThrottle",
          "Priority": 100,
          "Statement": Object {
            "RateBasedStatement": Object {
              "AggregateKeyType": "FORWARDED_IP",
              "ForwardedIPConfig": Object {
                "FallbackBehavior": "NO_NOMATCH",
                "HeaderName": "X-Reenviado-Para",
              },
              "Limit": 400,
            },
          },
          "VisibilityConfig": Object {
            "CloudWatchMetricsEnabled": true,
            "MetricName": "BaseThrottle",
            "SampledRequestsEnabled": true,
          },
        },
      ],
      "Scope": "REGIONAL",
      "Tags": undefined,
      "VisibilityConfig": Object {
        "CloudWatchMetricsEnabled": true,
        "MetricName": "apiWaf",
        "SampledRequestsEnabled": true,
      },
    },
    "Type": "AWS::WAFv2::WebACL",
  },
  "GraphQlWafAssoc": Object {
    "Properties": Object {
      "ResourceArn": Object {
        "Fn::GetAtt": Array [
          "GraphQlApi",
          "Arn",
        ],
      },
      "WebACLArn": Object {
        "Fn::GetAtt": Array [
          "GraphQlWaf",
          "Arn",
        ],
      },
    },
    "Type": "AWS::WAFv2::WebACLAssociation",
  },
}
`;

exports[`WAF should generate a WAF throttle rule with limit 1`] = `
Object {
  "GraphQlWaf": Object {
    "Properties": Object {
      "DefaultAction": Object {
        "Allow": Object {},
      },
      "Description": "ACL rules for AppSync api",
      "Name": "apiWaf",
      "Rules": Array [
        Object {
          "Action": Object {
            "Block": Object {},
          },
          "Name": "BaseThrottle",
          "Priority": 100,
          "Statement": Object {
            "RateBasedStatement": Object {
              "AggregateKeyType": "IP",
              "ForwardedIPConfig": undefined,
              "Limit": 200,
            },
          },
          "VisibilityConfig": Object {
            "CloudWatchMetricsEnabled": true,
            "MetricName": "BaseThrottle",
            "SampledRequestsEnabled": true,
          },
        },
      ],
      "Scope": "REGIONAL",
      "Tags": undefined,
      "VisibilityConfig": Object {
        "CloudWatchMetricsEnabled": true,
        "MetricName": "apiWaf",
        "SampledRequestsEnabled": true,
      },
    },
    "Type": "AWS::WAFv2::WebACL",
  },
  "GraphQlWafAssoc": Object {
    "Properties": Object {
      "ResourceArn": Object {
        "Fn::GetAtt": Array [
          "GraphQlApi",
          "Arn",
        ],
      },
      "WebACLArn": Object {
        "Fn::GetAtt": Array [
          "GraphQlWaf",
          "Arn",
        ],
      },
    },
    "Type": "AWS::WAFv2::WebACLAssociation",
  },
}
`;

exports[`WAF should generate a WAF with default no-introspect rule 1`] = `
Object {
  "GraphQlWaf": Object {
    "Properties": Object {
      "DefaultAction": Object {
        "Allow": Object {},
      },
      "Description": "ACL rules for AppSync api",
      "Name": "apiWaf",
      "Rules": Array [
        Object {
          "Action": Object {
            "Block": Object {},
          },
          "Name": "BaseDisableIntrospection",
          "Priority": 100,
          "Statement": Object {
            "ByteMatchStatement": Object {
              "FieldToMatch": Object {
                "Body": Object {},
              },
              "PositionalConstraint": "CONTAINS",
              "SearchString": "__schema",
              "TextTransformations": Array [
                Object {
                  "Priority": 0,
                  "Type": "COMPRESS_WHITE_SPACE",
                },
              ],
            },
          },
          "VisibilityConfig": Object {
            "CloudWatchMetricsEnabled": true,
            "MetricName": "BaseDisableIntrospection",
            "SampledRequestsEnabled": true,
          },
        },
      ],
      "Scope": "REGIONAL",
      "Tags": undefined,
      "VisibilityConfig": Object {
        "CloudWatchMetricsEnabled": true,
        "MetricName": "apiWaf",
        "SampledRequestsEnabled": true,
      },
    },
    "Type": "AWS::WAFv2::WebACL",
  },
  "GraphQlWafAssoc": Object {
    "Properties": Object {
      "ResourceArn": Object {
        "Fn::GetAtt": Array [
          "GraphQlApi",
          "Arn",
        ],
      },
      "WebACLArn": Object {
        "Fn::GetAtt": Array [
          "GraphQlWaf",
          "Arn",
        ],
      },
    },
    "Type": "AWS::WAFv2::WebACLAssociation",
  },
}
`;

exports[`WAF should generate a WAF with no-introspect rule and priority 1`] = `
Object {
  "GraphQlWaf": Object {
    "Properties": Object {
      "DefaultAction": Object {
        "Allow": Object {},
      },
      "Description": "ACL rules for AppSync api",
      "Name": "apiWaf",
      "Rules": Array [
        Object {
          "Action": Object {
            "Block": Object {},
          },
          "Name": "BaseDisableIntrospection",
          "Priority": 20,
          "Statement": Object {
            "ByteMatchStatement": Object {
              "FieldToMatch": Object {
                "Body": Object {},
              },
              "PositionalConstraint": "CONTAINS",
              "SearchString": "__schema",
              "TextTransformations": Array [
                Object {
                  "Priority": 0,
                  "Type": "COMPRESS_WHITE_SPACE",
                },
              ],
            },
          },
          "VisibilityConfig": Object {
            "CloudWatchMetricsEnabled": true,
            "MetricName": "BaseDisableIntrospection",
            "SampledRequestsEnabled": true,
          },
        },
      ],
      "Scope": "REGIONAL",
      "Tags": undefined,
      "VisibilityConfig": Object {
        "CloudWatchMetricsEnabled": true,
        "MetricName": "apiWaf",
        "SampledRequestsEnabled": true,
      },
    },
    "Type": "AWS::WAFv2::WebACL",
  },
  "GraphQlWafAssoc": Object {
    "Properties": Object {
      "ResourceArn": Object {
        "Fn::GetAtt": Array [
          "GraphQlApi",
          "Arn",
        ],
      },
      "WebACLArn": Object {
        "Fn::GetAtt": Array [
          "GraphQlWaf",
          "Arn",
        ],
      },
    },
    "Type": "AWS::WAFv2::WebACLAssociation",
  },
}
`;

exports[`WAF should generate match-all API key WAF rules 1`] = `
Object {
  "GraphQlWaf": Object {
    "Properties": Object {
      "DefaultAction": Object {
        "Allow": Object {},
      },
      "Description": "ACL rules for AppSync api",
      "Name": "apiWaf",
      "Rules": Array [
        Object {
          "Action": Object {
            "Allow": Object {},
          },
          "Name": "MatchAllRule",
          "Priority": 100,
          "Statement": Object {
            "ByteMatchStatement": Object {
              "FieldToMatch": Object {
                "SingleHeader": Object {
                  "Name": "X-Api-key",
                },
              },
              "PositionalConstraint": "EXACTLY",
              "SearchString": Object {
                "Fn::GetAtt": Array [
                  "GraphQlApiKeyMyKey",
                  "ApiKey",
                ],
              },
              "TextTransformations": Array [
                Object {
                  "Priority": 0,
                  "Type": "LOWERCASE",
                },
              ],
            },
          },
          "VisibilityConfig": Object {
            "CloudWatchMetricsEnabled": true,
            "MetricName": "MatchAllRule",
            "SampledRequestsEnabled": true,
          },
        },
      ],
      "Scope": "REGIONAL",
      "Tags": undefined,
      "VisibilityConfig": Object {
        "CloudWatchMetricsEnabled": true,
        "MetricName": "apiWaf",
        "SampledRequestsEnabled": true,
      },
    },
    "Type": "AWS::WAFv2::WebACL",
  },
  "GraphQlWafAssoc": Object {
    "Properties": Object {
      "ResourceArn": Object {
        "Fn::GetAtt": Array [
          "GraphQlApi",
          "Arn",
        ],
      },
      "WebACLArn": Object {
        "Fn::GetAtt": Array [
          "GraphQlWaf",
          "Arn",
        ],
      },
    },
    "Type": "AWS::WAFv2::WebACLAssociation",
  },
}
`;

exports[`WAF should suppress the Action option if OverrideAction is set 1`] = `
Object {
  "GraphQlWaf": Object {
    "Properties": Object {
      "DefaultAction": Object {
        "Allow": Object {},
      },
      "Description": "ACL rules for AppSync api",
      "Name": "apiWaf",
      "Rules": Array [
        Object {
          "Name": "MyRule1",
          "OverrideAction": Object {
            "None": Object {},
          },
          "Priority": 100,
          "Statement": Object {
            "ManagedRuleGroupStatement": Object {
              "Name": "AWSManagedRulesCommonRuleSet",
              "VendorName": "AWS",
            },
          },
          "VisibilityConfig": Object {
            "CloudWatchMetricsEnabled": true,
            "MetricName": "MyRule1",
            "SampledRequestsEnabled": true,
          },
        },
      ],
      "Scope": "REGIONAL",
      "Tags": undefined,
      "VisibilityConfig": Object {
        "CloudWatchMetricsEnabled": true,
        "MetricName": "apiWaf",
        "SampledRequestsEnabled": true,
      },
    },
    "Type": "AWS::WAFv2::WebACL",
  },
  "GraphQlWafAssoc": Object {
    "Properties": Object {
      "ResourceArn": Object {
        "Fn::GetAtt": Array [
          "GraphQlApi",
          "Arn",
        ],
      },
      "WebACLArn": Object {
        "Fn::GetAtt": Array [
          "GraphQlWaf",
          "Arn",
        ],
      },
    },
    "Type": "AWS::WAFv2::WebACLAssociation",
  },
}
`;

exports[`WAF should generate the WAF association and not the config 1`] = `
Object {
  "GraphQlWafAssoc": Object {
    "Properties": Object {
      "ResourceArn": Object {
        "Fn::GetAtt": Array [
          "GraphQlApi",
          "Arn",
        ],
      },
      "WebACLArn": "arn:aws:waf-regional:us-east-1:123456789012:rule/123-456-7890",
    },
    "Type": "AWS::WAFv2::WebACLAssociation",
  },
}
`;

exports[`api keys should fail with a date > 1 year 1`] = `"Api Key MyKey must be valid for a minimum of 1 day and a maximum of 365 days."`;

exports[`api keys should fail with invalid duration 1`] = `"Could not parse foobar as a valid duration"`;

exports[`api keys should fail with too long duration 1`] = `"Api Key MyKey must be valid for a minimum of 1 day and a maximum of 365 days."`;

exports[`api keys should fail with too short duration 1`] = `"Api Key MyKey must be valid for a minimum of 1 day and a maximum of 365 days."`;

exports[`api keys should fail with with a date < 1 day 1`] = `"Api Key MyKey must be valid for a minimum of 1 day and a maximum of 365 days."`;

exports[`api keys should generate several keys 1`] = `
Object {
  "GraphQlApiKeyDefault": Object {
    "Properties": Object {
      "ApiId": Object {
        "Fn::GetAtt": Array [
          "GraphQlApi",
          "ApiId",
        ],
      },
      "ApiKeyId": undefined,
      "Description": "Default Key",
      "Expires": 1610121600,
    },
    "Type": "AWS::AppSync::ApiKey",
  },
  "GraphQlApiKeyInlineKey": Object {
    "Properties": Object {
      "ApiId": Object {
        "Fn::GetAtt": Array [
          "GraphQlApi",
          "ApiId",
        ],
      },
      "ApiKeyId": undefined,
      "Description": "InlineKey",
      "Expires": 1639065600,
    },
    "Type": "AWS::AppSync::ApiKey",
  },
  "GraphQlApiKeyJane": Object {
    "Properties": Object {
      "ApiId": Object {
        "Fn::GetAtt": Array [
          "GraphQlApi",
          "ApiId",
        ],
      },
      "ApiKeyId": undefined,
      "Description": "Jane",
      "Expires": 1639065600,
    },
    "Type": "AWS::AppSync::ApiKey",
  },
  "GraphQlApiKeyJohn": Object {
    "Properties": Object {
      "ApiId": Object {
        "Fn::GetAtt": Array [
          "GraphQlApi",
          "ApiId",
        ],
      },
      "ApiKeyId": undefined,
      "Description": "John's key",
      "Expires": 1615305600,
    },
    "Type": "AWS::AppSync::ApiKey",
  },
  "GraphQlApiKeyKey1": Object {
    "Properties": Object {
      "ApiId": Object {
        "Fn::GetAtt": Array [
          "GraphQlApi",
          "ApiId",
        ],
      },
      "ApiKeyId": undefined,
      "Description": "Unnamed Key1",
      "Expires": 1607619600,
    },
    "Type": "AWS::AppSync::ApiKey",
  },
  "GraphQlApiKeyKey2": Object {
    "Properties": Object {
      "ApiId": Object {
        "Fn::GetAtt": Array [
          "GraphQlApi",
          "ApiId",
        ],
      },
      "ApiKeyId": "da2-7hfy4mjkdmh64lp0une7yht765",
      "Description": "Unnamed Key2",
      "Expires": 1639065600,
    },
    "Type": "AWS::AppSync::ApiKey",
  },
}
`;

exports[`api keys should generate several keys 2`] = `
Object {
  "GraphQlApiKeyDefault": Object {
    "Value": Object {
      "Fn::GetAtt": Array [
        "GraphQlApiKeyDefault",
        "ApiKey",
      ],
    },
  },
  "GraphQlApiKeyInlineKey": Object {
    "Value": Object {
      "Fn::GetAtt": Array [
        "GraphQlApiKeyInlineKey",
        "ApiKey",
      ],
    },
  },
  "GraphQlApiKeyJane": Object {
    "Value": Object {
      "Fn::GetAtt": Array [
        "GraphQlApiKeyJane",
        "ApiKey",
      ],
    },
  },
  "GraphQlApiKeyJohn": Object {
    "Value": Object {
      "Fn::GetAtt": Array [
        "GraphQlApiKeyJohn",
        "ApiKey",
      ],
    },
  },
  "GraphQlApiKeyKey1": Object {
    "Value": Object {
      "Fn::GetAtt": Array [
        "GraphQlApiKeyKey1",
        "ApiKey",
      ],
    },
  },
  "GraphQlApiKeyKey2": Object {
    "Value": Object {
      "Fn::GetAtt": Array [
        "GraphQlApiKeyKey2",
        "ApiKey",
      ],
    },
  },
}
`;

exports[`appsync config Additional authentication providers created 1`] = `
Array [
  Object {
    "AuthenticationType": "AMAZON_COGNITO_USER_POOLS",
    "LambdaAuthorizerConfig": undefined,
    "OpenIDConnectConfig": undefined,
    "UserPoolConfig": Object {
      "AppIdClientRegex": "appIdClientRegex",
      "AwsRegion": "eu-central-1",
      "UserPoolId": "userPoolGenerateId",
    },
  },
  Object {
    "AuthenticationType": "AWS_LAMBDA",
    "LambdaAuthorizerConfig": Object {
      "AuthorizerResultTtlInSeconds": 300,
      "AuthorizerUri": Object {
        "Fn::GetAtt": Array [
          "LambdaAuthorizerLambdaFunction",
          "Arn",
        ],
      },
      "IdentityValidationExpression": ".+",
    },
    "OpenIDConnectConfig": undefined,
    "UserPoolConfig": undefined,
  },
  Object {
    "AuthenticationType": "OPENID_CONNECT",
    "LambdaAuthorizerConfig": undefined,
    "OpenIDConnectConfig": Object {
      "AuthTTL": 1000,
      "ClientId": "clientId",
      "IatTTL": 1000,
      "Issuer": "issuer",
    },
    "UserPoolConfig": undefined,
  },
  Object {
    "AuthenticationType": "API_KEY",
    "LambdaAuthorizerConfig": undefined,
    "OpenIDConnectConfig": undefined,
    "UserPoolConfig": undefined,
  },
  Object {
    "AuthenticationType": "AWS_IAM",
    "LambdaAuthorizerConfig": undefined,
    "OpenIDConnectConfig": undefined,
    "UserPoolConfig": undefined,
  },
]
`;

exports[`appsync config Additional authentication providers created 2`] = `
Object {
  "Properties": Object {
    "ApiId": Object {
      "Fn::GetAtt": Array [
        "GraphQlApi",
        "ApiId",
      ],
    },
    "ApiKeyId": undefined,
    "Description": "Auto-generated api key",
    "Expires": 1639065600,
  },
  "Type": "AWS::AppSync::ApiKey",
}
`;

exports[`appsync config An error is thrown when AWS_IAM signature is enabled but no iamRoleStatements are passed 1`] = `"awsService: When using AWS_IAM signature, you must also specify the required iamRoleStatements"`;

exports[`appsync config AppSync settings are not updated when ApiId is provided 1`] = `
Object {
  "GraphQlCaching": Object {
    "Properties": Object {
      "ApiCachingBehavior": "FULL_REQUEST_CACHING",
      "ApiId": "testApiId",
      "AtRestEncryptionEnabled": false,
      "TransitEncryptionEnabled": false,
      "Ttl": 3600,
      "Type": "T2_SMALL",
    },
    "Type": "AWS::AppSync::ApiCache",
  },
  "GraphQlDsDynamoDbSource": Object {
    "Properties": Object {
      "ApiId": "testApiId",
      "Description": undefined,
      "DynamoDBConfig": Object {
        "AwsRegion": "us-east-1",
        "TableName": "myTable",
        "UseCallerCredentials": false,
        "Versioned": false,
      },
      "Name": "DynamoDbSource",
      "ServiceRoleArn": "arn:aws:iam::123456789012:role/service-role/myDynamoDbRole",
      "Type": "AMAZON_DYNAMODB",
    },
    "Type": "AWS::AppSync::DataSource",
  },
  "GraphQlFunctionConfigurationpipeline": Object {
    "Properties": Object {
      "ApiId": "testApiId",
      "DataSourceName": Object {
        "Fn::GetAtt": Array [
          "GraphQlDsds",
          "Name",
        ],
      },
      "Description": undefined,
      "FunctionVersion": "2018-05-29",
      "Name": "pipeline",
      "RequestMappingTemplate": "Content: mapping-templates/request.vtl",
      "ResponseMappingTemplate": "Content: mapping-templates/response.vtl",
    },
    "Type": "AWS::AppSync::FunctionConfiguration",
  },
  "GraphQlResolverQueryfield": Object {
    "DependsOn": "GraphQlSchema",
    "Properties": Object {
      "ApiId": "testApiId",
      "CachingConfig": Object {
        "Ttl": 3600,
      },
      "DataSourceName": Object {
        "Fn::GetAtt": Array [
          "GraphQlDsds",
          "Name",
        ],
      },
      "FieldName": "field",
      "Kind": "UNIT",
      "RequestMappingTemplate": "Content: mapping-templates/Query.field.request.vtl",
      "ResponseMappingTemplate": "Content: mapping-templates/Query.field.response.vtl",
      "TypeName": "Query",
    },
    "Type": "AWS::AppSync::Resolver",
  },
  "GraphQlSchema": Object {
    "Properties": Object {
      "ApiId": "testApiId",
      "Definition": "
                    type Thing implements One, Another {
            hello: ID!
          }
                    enum Method {
            DELETE             GET           }
        ",
    },
    "Type": "AWS::AppSync::GraphQLSchema",
  },
}
`;

exports[`appsync config Datasource generates HTTP authorization when authorizationConfig provided 1`] = `
Object {
  "GraphQlDsHTTPSource": Object {
    "Properties": Object {
      "ApiId": Object {
        "Fn::GetAtt": Array [
          "GraphQlApi",
          "ApiId",
        ],
      },
      "Description": "HTTPSource Desc",
      "HttpConfig": Object {
        "AuthorizationConfig": Object {
          "AuthorizationType": "AWS_IAM",
          "AwsIamConfig": Object {
            "SigningRegion": "us-east-1",
            "SigningServiceName": "ses",
          },
        },
        "Endpoint": "https://www.example.com/api",
      },
      "Name": "HTTPSource",
      "ServiceRoleArn": "arn:aws:iam::123456789012:role/service-role/myHTTPRole",
      "Type": "HTTP",
    },
    "Type": "AWS::AppSync::DataSource",
  },
}
`;

exports[`appsync config Datasource generates lambdaFunctionArn from functionName 1`] = `
Object {
  "GraphQlDslambdaSource": Object {
    "Properties": Object {
      "ApiId": Object {
        "Fn::GetAtt": Array [
          "GraphQlApi",
          "ApiId",
        ],
      },
      "Description": "lambdaSource Desc",
      "LambdaConfig": Object {
        "LambdaFunctionArn": Object {
          "Fn::GetAtt": Array [
            "MyFuncLambdaFunction",
            "Arn",
          ],
        },
      },
      "Name": "lambdaSource",
      "ServiceRoleArn": "arn:aws:iam::123456789012:role/service-role/myLambdaRole",
      "Type": "AWS_LAMBDA",
    },
    "Type": "AWS::AppSync::DataSource",
  },
}
`;

exports[`appsync config Datasource generates lambdaFunctionArn from functionName and functionAlias 1`] = `
Object {
  "GraphQlDslambdaSource": Object {
    "Properties": Object {
      "ApiId": Object {
        "Fn::GetAtt": Array [
          "GraphQlApi",
          "ApiId",
        ],
      },
      "Description": "lambdaSource Desc",
      "LambdaConfig": Object {
        "LambdaFunctionArn": Object {
          "Fn::Join": Array [
            ":",
            Array [
              Object {
                "Fn::GetAtt": Array [
                  "MyFuncLambdaFunction",
                  "Arn",
                ],
              },
              "myAlias",
            ],
          ],
        },
      },
      "Name": "lambdaSource",
      "ServiceRoleArn": "arn:aws:iam::123456789012:role/service-role/myLambdaRole",
      "Type": "AWS_LAMBDA",
    },
    "Type": "AWS::AppSync::DataSource",
  },
}
`;

exports[`appsync config Datasource uses lambdaFunctionArn when provided 1`] = `
Object {
  "GraphQlDslambdaSource": Object {
    "Properties": Object {
      "ApiId": Object {
        "Fn::GetAtt": Array [
          "GraphQlApi",
          "ApiId",
        ],
      },
      "Description": "lambdaSource Desc",
      "LambdaConfig": Object {
        "LambdaFunctionArn": Object {
          "Fn::GetAtt": Array [
            "MyFuncLambdaFunction",
            "Arn",
          ],
        },
      },
      "Name": "lambdaSource",
      "ServiceRoleArn": "arn:aws:iam::123456789012:role/service-role/myLambdaRole",
      "Type": "AWS_LAMBDA",
    },
    "Type": "AWS::AppSync::DataSource",
  },
}
`;

exports[`appsync config Deault API_KEY config created 1`] = `
Object {
  "GraphQlApiKeyDefault": Object {
    "Properties": Object {
      "ApiId": Object {
        "Fn::GetAtt": Array [
          "GraphQlApi",
          "ApiId",
        ],
      },
      "ApiKeyId": undefined,
      "Description": "Auto-generated api key",
      "Expires": 1639065600,
    },
    "Type": "AWS::AppSync::ApiKey",
  },
}
`;

exports[`appsync config Existing ApiId is used for all resources if provided 1`] = `
Object {
  "GraphQlDsDynamoDbSource": Object {
    "Properties": Object {
      "ApiId": "testApiId",
      "Description": undefined,
      "DynamoDBConfig": Object {
        "AwsRegion": "us-east-1",
        "TableName": "myTable",
        "UseCallerCredentials": false,
        "Versioned": false,
      },
      "Name": "DynamoDbSource",
      "ServiceRoleArn": "arn:aws:iam::123456789012:role/service-role/myDynamoDbRole",
      "Type": "AMAZON_DYNAMODB",
    },
    "Type": "AWS::AppSync::DataSource",
  },
  "GraphQlFunctionConfigurationpipeline": Object {
    "Properties": Object {
      "ApiId": "testApiId",
      "DataSourceName": Object {
        "Fn::GetAtt": Array [
          "GraphQlDsds",
          "Name",
        ],
      },
      "Description": undefined,
      "FunctionVersion": "2018-05-29",
      "Name": "pipeline",
      "RequestMappingTemplate": "Content: mapping-templates/request.vtl",
      "ResponseMappingTemplate": "Content: mapping-templates/response.vtl",
    },
    "Type": "AWS::AppSync::FunctionConfiguration",
  },
  "GraphQlResolverQueryfield": Object {
    "DependsOn": "GraphQlSchema",
    "Properties": Object {
      "ApiId": "testApiId",
      "DataSourceName": Object {
        "Fn::GetAtt": Array [
          "GraphQlDsds",
          "Name",
        ],
      },
      "FieldName": "field",
      "Kind": "UNIT",
      "RequestMappingTemplate": "Content: mapping-templates/Query.field.request.vtl",
      "ResponseMappingTemplate": "Content: mapping-templates/Query.field.response.vtl",
      "TypeName": "Query",
    },
    "Type": "AWS::AppSync::Resolver",
  },
  "GraphQlSchema": Object {
    "Properties": Object {
      "ApiId": "testApiId",
      "Definition": "
                    type Thing implements One, Another {
            hello: ID!
          }
                    enum Method {
            DELETE             GET           }
        ",
    },
    "Type": "AWS::AppSync::GraphQLSchema",
  },
}
`;

exports[`appsync config HTTP Datasource defaults the IAM role signing region to the stack's region 1`] = `
Object {
  "GraphQlDsHTTPSource": Object {
    "Properties": Object {
      "ApiId": Object {
        "Fn::GetAtt": Array [
          "GraphQlApi",
          "ApiId",
        ],
      },
      "Description": "HTTPSource Desc",
      "HttpConfig": Object {
        "AuthorizationConfig": Object {
          "AuthorizationType": "AWS_IAM",
          "AwsIamConfig": Object {
            "SigningRegion": "us-east-1",
            "SigningServiceName": "ses",
          },
        },
        "Endpoint": "https://www.example.com/api",
      },
      "Name": "HTTPSource",
      "ServiceRoleArn": "arn:aws:iam::123456789012:role/service-role/myHTTPRole",
      "Type": "HTTP",
    },
    "Type": "AWS::AppSync::DataSource",
  },
}
`;

exports[`appsync config It passes when AWS_IAM signature is enabled and iamRoleStatements are passed 1`] = `
Object {
  "GraphQlDsawsServiceRole": Object {
    "Properties": Object {
      "AssumeRolePolicyDocument": Object {
        "Statement": Array [
          Object {
            "Action": Array [
              "sts:AssumeRole",
            ],
            "Effect": "Allow",
            "Principal": Object {
              "Service": Array [
                "appsync.amazonaws.com",
              ],
            },
          },
        ],
        "Version": "2012-10-17",
      },
      "Policies": Array [
        Object {
          "PolicyDocument": Object {
            "Statement": Array [
              Object {
                "Action": "*",
                "Effect": "Allow",
                "Resource": "*",
              },
            ],
            "Version": "2012-10-17",
          },
          "PolicyName": "GraphQlDsawsServicePolicy",
        },
      ],
    },
    "Type": "AWS::IAM::Role",
  },
}
`;

exports[`appsync config Schema allow hash comments when using allowHashDescription true in config 1`] = `
Object {
  "GraphQlSchema": Object {
    "Properties": Object {
      "ApiId": Object {
        "Fn::GetAtt": Array [
          "GraphQlApi",
          "ApiId",
        ],
      },
      "Definition": "
                    type Thing implements One, Another {
            hello: ID!
          }
          # test enum
          enum Method {
            DELETE
            GET
          }
        ",
    },
    "Type": "AWS::AppSync::GraphQLSchema",
  },
}
`;

exports[`appsync config Schema is transformed into App Sync compatible syntax 1`] = `
Object {
  "GraphQlSchema": Object {
    "Properties": Object {
      "ApiId": Object {
        "Fn::GetAtt": Array [
          "GraphQlApi",
          "ApiId",
        ],
      },
      "Definition": "
                    type Thing implements One, Another {
            hello: ID!
          }
                    enum Method {
            DELETE             GET           }
        ",
    },
    "Type": "AWS::AppSync::GraphQLSchema",
  },
}
`;

exports[`appsync config appsync cloudwatch log group is created when logs enabled 1`] = `
Object {
  "Properties": Object {
    "LogGroupName": Object {
      "Fn::Join": Array [
        "/",
        Array [
          "/aws/appsync/apis",
          Object {
            "Fn::GetAtt": Array [
              "GraphQlApi",
              "ApiId",
            ],
          },
        ],
      ],
    },
    "RetentionInDays": 14,
  },
  "Type": "AWS::Logs::LogGroup",
}
`;

exports[`appsync config appsync cloudwatch role is autogenerated 1`] = `
Object {
  "GraphQlApiCloudWatchLogsPolicy": Object {
    "Properties": Object {
      "PolicyDocument": Object {
        "Statement": Array [
          Object {
            "Action": Array [
              "logs:CreateLogGroup",
              "logs:CreateLogStream",
              "logs:PutLogEvents",
            ],
            "Effect": "Allow",
            "Resource": Array [
              Object {
                "Fn::GetAtt": Array [
                  "GraphQlApiLogGroup",
                  "Arn",
                ],
              },
            ],
          },
        ],
        "Version": "2012-10-17",
      },
      "PolicyName": "GraphQlApiCloudWatchLogsRolePolicy",
      "Roles": Array [
        Object {
          "Ref": "GraphQlApiCloudWatchLogsRole",
        },
      ],
    },
    "Type": "AWS::IAM::Policy",
  },
  "GraphQlApiCloudWatchLogsRole": Object {
    "Properties": Object {
      "AssumeRolePolicyDocument": Object {
        "Statement": Array [
          Object {
            "Action": Array [
              "sts:AssumeRole",
            ],
            "Effect": "Allow",
            "Principal": Object {
              "Service": Array [
                "appsync.amazonaws.com",
              ],
            },
          },
        ],
        "Version": "2012-10-17",
      },
    },
    "Type": "AWS::IAM::Role",
  },
}
`;

exports[`iamRoleStatements getDataSourceIamRolesResouces with Default generated statements 1`] = `
Object {
  "GraphQlDsDynamoDbSourceRole": Object {
    "Properties": Object {
      "AssumeRolePolicyDocument": Object {
        "Statement": Array [
          Object {
            "Action": Array [
              "sts:AssumeRole",
            ],
            "Effect": "Allow",
            "Principal": Object {
              "Service": Array [
                "appsync.amazonaws.com",
              ],
            },
          },
        ],
        "Version": "2012-10-17",
      },
      "Policies": Array [
        Object {
          "PolicyDocument": Object {
            "Statement": Array [
              Object {
                "Action": Array [
                  "dynamodb:DeleteItem",
                  "dynamodb:GetItem",
                  "dynamodb:PutItem",
                  "dynamodb:Query",
                  "dynamodb:Scan",
                  "dynamodb:UpdateItem",
                  "dynamodb:BatchGetItem",
                  "dynamodb:BatchWriteItem",
                  "dynamodb:ConditionCheckItem",
                ],
                "Effect": "Allow",
                "Resource": Array [
                  Object {
                    "Fn::Join": Array [
                      ":",
                      Array [
                        "arn",
                        "aws",
                        "dynamodb",
                        "us-east-1",
                        Object {
                          "Ref": "AWS::AccountId",
                        },
                        Object {
                          "Fn::Join": Array [
                            "/",
                            Array [
                              "table",
                              "myTable",
                            ],
                          ],
                        },
                      ],
                    ],
                  },
                  Object {
                    "Fn::Join": Array [
                      "/",
                      Array [
                        Object {
                          "Fn::Join": Array [
                            ":",
                            Array [
                              "arn",
                              "aws",
                              "dynamodb",
                              "us-east-1",
                              Object {
                                "Ref": "AWS::AccountId",
                              },
                              Object {
                                "Fn::Join": Array [
                                  "/",
                                  Array [
                                    "table",
                                    "myTable",
                                  ],
                                ],
                              },
                            ],
                          ],
                        },
                        "*",
                      ],
                    ],
                  },
                ],
              },
            ],
            "Version": "2012-10-17",
          },
          "PolicyName": "GraphQlDsDynamoDbSourcePolicy",
        },
      ],
    },
    "Type": "AWS::IAM::Role",
  },
  "GraphQlDsElasticSearchSource2Role": Object {
    "Properties": Object {
      "AssumeRolePolicyDocument": Object {
        "Statement": Array [
          Object {
            "Action": Array [
              "sts:AssumeRole",
            ],
            "Effect": "Allow",
            "Principal": Object {
              "Service": Array [
                "appsync.amazonaws.com",
              ],
            },
          },
        ],
        "Version": "2012-10-17",
      },
      "Policies": Array [
        Object {
          "PolicyDocument": Object {
            "Statement": Array [
              Object {
                "Action": Array [
                  "es:ESHttpDelete",
                  "es:ESHttpGet",
                  "es:ESHttpHead",
                  "es:ESHttpPost",
                  "es:ESHttpPut",
                  "es:ESHttpPatch",
                ],
                "Effect": "Allow",
                "Resource": Array [
                  Object {
                    "Fn::Join": Array [
                      "/",
                      Array [
                        Object {
                          "Fn::GetAtt": Array [
                            Object {
                              "Ref": "ESDomain",
                            },
                            "Arn",
                          ],
                        },
                        "*",
                      ],
                    ],
                  },
                ],
              },
            ],
            "Version": "2012-10-17",
          },
          "PolicyName": "GraphQlDsElasticSearchSource2Policy",
        },
      ],
    },
    "Type": "AWS::IAM::Role",
  },
  "GraphQlDsElasticSearchSourceRole": Object {
    "Properties": Object {
      "AssumeRolePolicyDocument": Object {
        "Statement": Array [
          Object {
            "Action": Array [
              "sts:AssumeRole",
            ],
            "Effect": "Allow",
            "Principal": Object {
              "Service": Array [
                "appsync.amazonaws.com",
              ],
            },
          },
        ],
        "Version": "2012-10-17",
      },
      "Policies": Array [
        Object {
          "PolicyDocument": Object {
            "Statement": Array [
              Object {
                "Action": Array [
                  "es:ESHttpDelete",
                  "es:ESHttpGet",
                  "es:ESHttpHead",
                  "es:ESHttpPost",
                  "es:ESHttpPut",
                  "es:ESHttpPatch",
                ],
                "Effect": "Allow",
                "Resource": Array [
                  Object {
                    "Fn::Join": Array [
                      ":",
                      Array [
                        "arn",
                        "aws",
                        "es",
                        "us-east-1",
                        Object {
                          "Ref": "AWS::AccountId",
                        },
                        "domain/search-my-domain-abcdefghijklmnop.us-east-1.es.amazonaws.com/*",
                      ],
                    ],
                  },
                ],
              },
            ],
            "Version": "2012-10-17",
          },
          "PolicyName": "GraphQlDsElasticSearchSourcePolicy",
        },
      ],
    },
    "Type": "AWS::IAM::Role",
  },
  "GraphQlDsLambdaSourceRole": Object {
    "Properties": Object {
      "AssumeRolePolicyDocument": Object {
        "Statement": Array [
          Object {
            "Action": Array [
              "sts:AssumeRole",
            ],
            "Effect": "Allow",
            "Principal": Object {
              "Service": Array [
                "appsync.amazonaws.com",
              ],
            },
          },
        ],
        "Version": "2012-10-17",
      },
      "Policies": Array [
        Object {
          "PolicyDocument": Object {
            "Statement": Array [
              Object {
                "Action": Array [
                  "lambda:invokeFunction",
                ],
                "Effect": "Allow",
                "Resource": Array [
                  Object {
                    "Fn::GetAtt": Array [
                      "MyTestFunctionLambdaFunction",
                      "Arn",
                    ],
                  },
                  Object {
                    "Fn::Join": Array [
                      ":",
                      Array [
                        Object {
                          "Fn::GetAtt": Array [
                            "MyTestFunctionLambdaFunction",
                            "Arn",
                          ],
                        },
                        "*",
                      ],
                    ],
                  },
                ],
              },
            ],
            "Version": "2012-10-17",
          },
          "PolicyName": "GraphQlDsLambdaSourcePolicy",
        },
      ],
    },
    "Type": "AWS::IAM::Role",
  },
  "GraphQlDsOpenSearchSource2Role": Object {
    "Properties": Object {
      "AssumeRolePolicyDocument": Object {
        "Statement": Array [
          Object {
            "Action": Array [
              "sts:AssumeRole",
            ],
            "Effect": "Allow",
            "Principal": Object {
              "Service": Array [
                "appsync.amazonaws.com",
              ],
            },
          },
        ],
        "Version": "2012-10-17",
      },
      "Policies": Array [
        Object {
          "PolicyDocument": Object {
            "Statement": Array [
              Object {
                "Action": Array [
                  "es:ESHttpDelete",
                  "es:ESHttpGet",
                  "es:ESHttpHead",
                  "es:ESHttpPost",
                  "es:ESHttpPut",
                  "es:ESHttpPatch",
                ],
                "Effect": "Allow",
                "Resource": Array [
                  Object {
                    "Fn::Join": Array [
                      "/",
                      Array [
                        Object {
                          "Fn::GetAtt": Array [
                            Object {
                              "Ref": "OSDomain",
                            },
                            "Arn",
                          ],
                        },
                        "*",
                      ],
                    ],
                  },
                ],
              },
            ],
            "Version": "2012-10-17",
          },
          "PolicyName": "GraphQlDsOpenSearchSource2Policy",
        },
      ],
    },
    "Type": "AWS::IAM::Role",
  },
  "GraphQlDsOpenSearchSourceRole": Object {
    "Properties": Object {
      "AssumeRolePolicyDocument": Object {
        "Statement": Array [
          Object {
            "Action": Array [
              "sts:AssumeRole",
            ],
            "Effect": "Allow",
            "Principal": Object {
              "Service": Array [
                "appsync.amazonaws.com",
              ],
            },
          },
        ],
        "Version": "2012-10-17",
      },
      "Policies": Array [
        Object {
          "PolicyDocument": Object {
            "Statement": Array [
              Object {
                "Action": Array [
                  "es:ESHttpDelete",
                  "es:ESHttpGet",
                  "es:ESHttpHead",
                  "es:ESHttpPost",
                  "es:ESHttpPut",
                  "es:ESHttpPatch",
                ],
                "Effect": "Allow",
                "Resource": Array [
                  Object {
                    "Fn::Join": Array [
                      ":",
                      Array [
                        "arn",
                        "aws",
                        "es",
                        "us-east-1",
                        Object {
                          "Ref": "AWS::AccountId",
                        },
                        "domain/search-my-os-domain-abcdefghijklmnop.us-east-1.es.amazonaws.com/*",
                      ],
                    ],
                  },
                ],
              },
            ],
            "Version": "2012-10-17",
          },
          "PolicyName": "GraphQlDsOpenSearchSourcePolicy",
        },
      ],
    },
    "Type": "AWS::IAM::Role",
  },
  "GraphQlDsRelationalDbSourceRole": Object {
    "Properties": Object {
      "AssumeRolePolicyDocument": Object {
        "Statement": Array [
          Object {
            "Action": Array [
              "sts:AssumeRole",
            ],
            "Effect": "Allow",
            "Principal": Object {
              "Service": Array [
                "appsync.amazonaws.com",
              ],
            },
          },
        ],
        "Version": "2012-10-17",
      },
      "Policies": Array [
        Object {
          "PolicyDocument": Object {
            "Statement": Array [
              Object {
                "Action": Array [
                  "rds-data:DeleteItems",
                  "rds-data:ExecuteSql",
                  "rds-data:ExecuteStatement",
                  "rds-data:GetItems",
                  "rds-data:InsertItems",
                  "rds-data:UpdateItems",
                ],
                "Effect": "Allow",
                "Resource": Array [
                  Object {
                    "Fn::Join": Array [
                      ":",
                      Array [
                        "arn",
                        "aws",
                        "rds",
                        "us-east-1",
                        Object {
                          "Ref": "AWS::AccountId",
                        },
                        "cluster",
                        "aurora-cluster-id",
                      ],
                    ],
                  },
                  Object {
                    "Fn::Join": Array [
                      ":",
                      Array [
                        Object {
                          "Fn::Join": Array [
                            ":",
                            Array [
                              "arn",
                              "aws",
                              "rds",
                              "us-east-1",
                              Object {
                                "Ref": "AWS::AccountId",
                              },
                              "cluster",
                              "aurora-cluster-id",
                            ],
                          ],
                        },
                        "*",
                      ],
                    ],
                  },
                ],
              },
              Object {
                "Action": Array [
                  "secretsmanager:GetSecretValue",
                ],
                "Effect": "Allow",
                "Resource": Array [
                  "arn:aws:secretsmanager:us-east-1:123456789012:secret:rds-cluster-secret-XuztPa",
                  Object {
                    "Fn::Join": Array [
                      ":",
                      Array [
                        "arn:aws:secretsmanager:us-east-1:123456789012:secret:rds-cluster-secret-XuztPa",
                        "*",
                      ],
                    ],
                  },
                ],
              },
            ],
            "Version": "2012-10-17",
          },
          "PolicyName": "GraphQlDsRelationalDbSourcePolicy",
        },
      ],
    },
    "Type": "AWS::IAM::Role",
  },
}
`;

exports[`iamRoleStatements getDataSourceIamRolesResouces with Specific statements 1`] = `
Object {
  "GraphQlDsDynamoDbSourceRole": Object {
    "Properties": Object {
      "AssumeRolePolicyDocument": Object {
        "Statement": Array [
          Object {
            "Action": Array [
              "sts:AssumeRole",
            ],
            "Effect": "Allow",
            "Principal": Object {
              "Service": Array [
                "appsync.amazonaws.com",
              ],
            },
          },
        ],
        "Version": "2012-10-17",
      },
      "Policies": Array [
        Object {
          "PolicyDocument": Object {
            "Statement": Array [
              Object {
                "Action": Array [
                  "dynamodb:Query",
                  "dynamodb:Scan",
                ],
                "Effect": "Allow",
                "Resource": Array [
                  "arn:aws:dynamodb:us-east-1:123456789012:table/myTable",
                  "arn:aws:dynamodb:us-east-1:123456789012:table/myTable/*",
                ],
              },
            ],
            "Version": "2012-10-17",
          },
          "PolicyName": "GraphQlDsDynamoDbSourcePolicy",
        },
      ],
    },
    "Type": "AWS::IAM::Role",
  },
  "GraphQlDsElasticSearchSource2Role": Object {
    "Properties": Object {
      "AssumeRolePolicyDocument": Object {
        "Statement": Array [
          Object {
            "Action": Array [
              "sts:AssumeRole",
            ],
            "Effect": "Allow",
            "Principal": Object {
              "Service": Array [
                "appsync.amazonaws.com",
              ],
            },
          },
        ],
        "Version": "2012-10-17",
      },
      "Policies": Array [
        Object {
          "PolicyDocument": Object {
            "Statement": Array [
              Object {
                "Action": Array [
                  "ES:ESHttpGet",
                ],
                "Effect": "Allow",
                "Resource": Array [
                  Object {
                    "Fn::GetAtt": Array [
                      "EsResource",
                      "Arn",
                    ],
                  },
                ],
              },
            ],
            "Version": "2012-10-17",
          },
          "PolicyName": "GraphQlDsElasticSearchSource2Policy",
        },
      ],
    },
    "Type": "AWS::IAM::Role",
  },
  "GraphQlDsElasticSearchSourceRole": Object {
    "Properties": Object {
      "AssumeRolePolicyDocument": Object {
        "Statement": Array [
          Object {
            "Action": Array [
              "sts:AssumeRole",
            ],
            "Effect": "Allow",
            "Principal": Object {
              "Service": Array [
                "appsync.amazonaws.com",
              ],
            },
          },
        ],
        "Version": "2012-10-17",
      },
      "Policies": Array [
        Object {
          "PolicyDocument": Object {
            "Statement": Array [
              Object {
                "Action": Array [
                  "ES:ESHttpGet",
                ],
                "Effect": "Allow",
                "Resource": Array [
                  "arn:aws:es:us-east-1:123456789012:domain/my-domain",
                ],
              },
            ],
            "Version": "2012-10-17",
          },
          "PolicyName": "GraphQlDsElasticSearchSourcePolicy",
        },
      ],
    },
    "Type": "AWS::IAM::Role",
  },
  "GraphQlDsLambdaSourceRole": Object {
    "Properties": Object {
      "AssumeRolePolicyDocument": Object {
        "Statement": Array [
          Object {
            "Action": Array [
              "sts:AssumeRole",
            ],
            "Effect": "Allow",
            "Principal": Object {
              "Service": Array [
                "appsync.amazonaws.com",
              ],
            },
          },
        ],
        "Version": "2012-10-17",
      },
      "Policies": Array [
        Object {
          "PolicyDocument": Object {
            "Statement": Array [
              Object {
                "Action": Array [
                  "lambda:invokeFunction",
                ],
                "Effect": "Allow",
                "Resource": Array [
                  "arn:aws:lambda:us-east-1:123456789012:function:myTestFunction",
                ],
              },
            ],
            "Version": "2012-10-17",
          },
          "PolicyName": "GraphQlDsLambdaSourcePolicy",
        },
      ],
    },
    "Type": "AWS::IAM::Role",
  },
  "GraphQlDsRelationalDatabaseSourceRole": Object {
    "Properties": Object {
      "AssumeRolePolicyDocument": Object {
        "Statement": Array [
          Object {
            "Action": Array [
              "sts:AssumeRole",
            ],
            "Effect": "Allow",
            "Principal": Object {
              "Service": Array [
                "appsync.amazonaws.com",
              ],
            },
          },
        ],
        "Version": "2012-10-17",
      },
      "Policies": Array [
        Object {
          "PolicyDocument": Object {
            "Statement": Array [
              Object {
                "Action": Array [
                  "rds-data:DeleteItems",
                  "rds-data:ExecuteSql",
                  "rds-data:ExecuteStatement",
                  "rds-data:GetItems",
                  "rds-data:InsertItems",
                  "rds-data:UpdateItems",
                ],
                "Effect": "Allow",
                "Resource": Array [
                  "arn:aws:rds:us-east-1:123456789012:cluster:aurora-cluster-id",
                  "arn:aws:rds:us-east-1:123456789012:cluster:aurora-cluster-id:*",
                ],
              },
              Object {
                "Action": Array [
                  "secretsmanager:GetSecretValue",
                ],
                "Effect": "Allow",
                "Resource": Array [
                  "arn:aws:secretsmanager:us-east-1:123456789012:secret:rds-cluster-secret-XuztPa",
                  "arn:aws:secretsmanager:us-east-1:123456789012:secret:rds-cluster-secret-XuztPa:*",
                ],
              },
            ],
            "Version": "2012-10-17",
          },
          "PolicyName": "GraphQlDsRelationalDatabaseSourcePolicy",
        },
      ],
    },
    "Type": "AWS::IAM::Role",
  },
}
`;

exports[`individual template substitutions Substitutions for individual template should override global substitutions. 1`] = `
Object {
  "Fn::Join": Array [
    "",
    Array [
      "#set($partitionKey = \\"",
      Object {
        "Fn::Sub": Array [
          "\${globalPK}",
          Object {
            "globalPK": "PK",
          },
        ],
      },
      "\\")
{
\\"version\\" : \\"2018-05-29\\",
\\"operation\\" : \\"GetItem\\",
\\"key\\" : {
\\"partitionKey\\": { \\"S\\": \\"",
      Object {
        "Fn::Sub": Array [
          "\${globalPK}",
          Object {
            "globalPK": "PK",
          },
        ],
      },
      "\\" },
\\"sortKey\\": { \\"S\\": \\"",
      Object {
        "Fn::Sub": Array [
          "\${globalSK}",
          Object {
            "globalSK": "SK",
          },
        ],
      },
      "\\" },
}
}",
    ],
  ],
}
`;

exports[`template substitutions Falsy substitutions work 1`] = `
Object {
  "Fn::Join": Array [
    "",
    Array [
      "emptyString=",
      Object {
        "Fn::Sub": Array [
          "\${emptyString}",
          Object {
            "emptyString": "",
          },
        ],
      },
      "booleanFalse=",
      Object {
        "Fn::Sub": Array [
          "\${booleanFalse}",
          Object {
            "booleanFalse": false,
          },
        ],
      },
      "numberZero=",
      Object {
        "Fn::Sub": Array [
          "\${numberZero}",
          Object {
            "numberZero": 0,
          },
        ],
      },
      "",
    ],
  ],
}
`;

exports[`template substitutions Templates with substitutions should be transformed into Fn::Join with Fn::Sub objects 1`] = `
Object {
  "Fn::Join": Array [
    "",
    Array [
      "#set($partitionKey = \\"",
      Object {
        "Fn::Sub": Array [
          "\${globalPK}",
          Object {
            "globalPK": "PK",
          },
        ],
      },
      "\\")
{
\\"version\\" : \\"2018-05-29\\",
\\"operation\\" : \\"GetItem\\",
\\"key\\" : {
\\"partitionKey\\": { \\"S\\": \\"",
      Object {
        "Fn::Sub": Array [
          "\${globalPK}",
          Object {
            "globalPK": "PK",
          },
        ],
      },
      "\\" },
\\"sortKey\\": { \\"S\\": \\"",
      Object {
        "Fn::Sub": Array [
          "\${globalSK}",
          Object {
            "globalSK": "SK",
          },
        ],
      },
      "\\" },
}
}",
    ],
  ],
}
`;
