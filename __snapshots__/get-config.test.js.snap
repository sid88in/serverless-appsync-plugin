// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Schema as absolute path 1`] = `
Array [
  Object {
    "additionalAuthenticationProviders": Array [],
    "authenticationType": "AWS_IAM",
    "dataSources": Array [],
    "defaultMappingTemplates": Object {},
    "functionConfigurations": Array [],
    "functionConfigurationsLocation": "mapping-templates",
    "isSingleConfig": true,
    "mappingTemplates": Array [],
    "mappingTemplatesLocation": "mapping-templates",
    "name": "api",
    "region": "us-east-1",
    "schema": "type Mutation {
  
  # Create a tweet for a user
  # consumer keys and tokens are not required for dynamo integration
  createTweet(tweet: String!, consumer_key: String, consumer_secret: String, access_token_key: String, access_token_secret: String, created_at: String!): Tweet!
  
  # Delete User Tweet
  deleteTweet(tweet_id: String!, consumer_key: String, consumer_secret: String, access_token_key: String, access_token_secret: String): Tweet!
  
  # Retweet existing Tweet
  reTweet(tweet_id: String!, consumer_key: String, consumer_secret: String, access_token_key: String, access_token_secret: String): Tweet!
  
  # Update existing Tweet
  updateTweet(tweet_id: String!, tweet: String!): Tweet!
  
  # Create user info is available in dynamo integration
  updateUserInfo(location: String!, description: String!, name: String!, followers_count: Int!, friends_count: Int!, favourites_count: Int!, followers: [String!]!): User!
}

type Query {
  meInfo(consumer_key: String, consumer_secret: String): User!
  getUserInfo(handle: String!, consumer_key: String, consumer_secret: String): User!
  
  # search functionality is available in elasticsearch integration
  searchAllTweetsByKeyword(keyword: String!): TweetConnection
}

type Subscription {
  addTweet: Tweet @aws_subscribe(mutations: [\\"createTweet\\"])
}

type Tweet {
  tweet_id: String!
  tweet: String!
  retweeted: Boolean
  retweet_count: Int
  favorited: Boolean
  created_at: String!
}

type TweetConnection {
  items: [Tweet!]!
  nextToken: String
}

type User {
  name: String!
  handle: String!
  location: String!
  description: String!
  followers_count: Int!
  friends_count: Int!
  favourites_count: Int!
  followers: [String!]!
  topTweet: Tweet
  tweets(limit: Int!, nextToken: String): TweetConnection
  
  # search functionality is available in elasticsearch integration
  searchTweetsByKeyword(keyword: String!): TweetConnection
}

schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}",
    "substitutions": Object {},
    "xrayEnabled": false,
  },
]
`;

exports[`Schema as array 1`] = `
Array [
  Object {
    "additionalAuthenticationProviders": Array [],
    "authenticationType": "AWS_IAM",
    "dataSources": Array [],
    "defaultMappingTemplates": Object {},
    "functionConfigurations": Array [],
    "functionConfigurationsLocation": "mapping-templates",
    "isSingleConfig": true,
    "mappingTemplates": Array [],
    "mappingTemplatesLocation": "mapping-templates",
    "name": "api",
    "region": "us-east-1",
    "schema": "type Mutation {
  
  # Create a tweet for a user
  # consumer keys and tokens are not required for dynamo integration
  createTweet(tweet: String!, consumer_key: String, consumer_secret: String, access_token_key: String, access_token_secret: String, created_at: String!): Tweet!
  
  # Delete User Tweet
  deleteTweet(tweet_id: String!, consumer_key: String, consumer_secret: String, access_token_key: String, access_token_secret: String): Tweet!
  
  # Retweet existing Tweet
  reTweet(tweet_id: String!, consumer_key: String, consumer_secret: String, access_token_key: String, access_token_secret: String): Tweet!
  
  # Update existing Tweet
  updateTweet(tweet_id: String!, tweet: String!): Tweet!
  
  # Create user info is available in dynamo integration
  updateUserInfo(location: String!, description: String!, name: String!, followers_count: Int!, friends_count: Int!, favourites_count: Int!, followers: [String!]!): User!
}

type Query {
  
  # search functionality is available in elasticsearch integration
  searchAllTweetsByKeyword(keyword: String!): TweetConnection
  getUserInfo(handle: String!, consumer_key: String, consumer_secret: String): User!
  meInfo(consumer_key: String, consumer_secret: String): User!
}

type Subscription {
  addTweet: Tweet @aws_subscribe(mutations: [\\"createTweet\\"])
}

type Tweet {
  tweet_id: String!
  tweet: String!
  retweeted: Boolean
  retweet_count: Int
  favorited: Boolean
  created_at: String!
}

type TweetConnection {
  items: [Tweet!]!
  nextToken: String
}

schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

type User {
  name: String!
  handle: String!
  location: String!
  description: String!
  followers_count: Int!
  friends_count: Int!
  favourites_count: Int!
  followers: [String!]!
  topTweet: Tweet
  tweets(limit: Int!, nextToken: String): TweetConnection
  
  # search functionality is available in elasticsearch integration
  searchTweetsByKeyword(keyword: String!): TweetConnection
}",
    "substitutions": Object {},
    "xrayEnabled": false,
  },
]
`;

exports[`Schema as glob pattern 1`] = `
Array [
  Object {
    "additionalAuthenticationProviders": Array [],
    "authenticationType": "AWS_IAM",
    "dataSources": Array [],
    "defaultMappingTemplates": Object {},
    "functionConfigurations": Array [],
    "functionConfigurationsLocation": "mapping-templates",
    "isSingleConfig": true,
    "mappingTemplates": Array [],
    "mappingTemplatesLocation": "mapping-templates",
    "name": "api",
    "region": "us-east-1",
    "schema": "type Mutation {
  
  # Create a tweet for a user
  # consumer keys and tokens are not required for dynamo integration
  createTweet(tweet: String!, consumer_key: String, consumer_secret: String, access_token_key: String, access_token_secret: String, created_at: String!): Tweet!
  
  # Delete User Tweet
  deleteTweet(tweet_id: String!, consumer_key: String, consumer_secret: String, access_token_key: String, access_token_secret: String): Tweet!
  
  # Retweet existing Tweet
  reTweet(tweet_id: String!, consumer_key: String, consumer_secret: String, access_token_key: String, access_token_secret: String): Tweet!
  
  # Update existing Tweet
  updateTweet(tweet_id: String!, tweet: String!): Tweet!
  
  # Create user info is available in dynamo integration
  updateUserInfo(location: String!, description: String!, name: String!, followers_count: Int!, friends_count: Int!, favourites_count: Int!, followers: [String!]!): User!
}

type Query {
  
  # search functionality is available in elasticsearch integration
  searchAllTweetsByKeyword(keyword: String!): TweetConnection
  getUserInfo(handle: String!, consumer_key: String, consumer_secret: String): User!
  meInfo(consumer_key: String, consumer_secret: String): User!
}

type Subscription {
  addTweet: Tweet @aws_subscribe(mutations: [\\"createTweet\\"])
}

type Tweet {
  tweet_id: String!
  tweet: String!
  retweeted: Boolean
  retweet_count: Int
  favorited: Boolean
  created_at: String!
}

type TweetConnection {
  items: [Tweet!]!
  nextToken: String
}

schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

type User {
  name: String!
  handle: String!
  location: String!
  description: String!
  followers_count: Int!
  friends_count: Int!
  favourites_count: Int!
  followers: [String!]!
  topTweet: Tweet
  tweets(limit: Int!, nextToken: String): TweetConnection
  
  # search functionality is available in elasticsearch integration
  searchTweetsByKeyword(keyword: String!): TweetConnection
}",
    "substitutions": Object {},
    "xrayEnabled": false,
  },
]
`;

exports[`Schema as string 1`] = `
Array [
  Object {
    "additionalAuthenticationProviders": Array [],
    "authenticationType": "AWS_IAM",
    "dataSources": Array [],
    "defaultMappingTemplates": Object {},
    "functionConfigurations": Array [],
    "functionConfigurationsLocation": "mapping-templates",
    "isSingleConfig": true,
    "mappingTemplates": Array [],
    "mappingTemplatesLocation": "mapping-templates",
    "name": "api",
    "region": "us-east-1",
    "schema": "type Mutation {
  
  # Create a tweet for a user
  # consumer keys and tokens are not required for dynamo integration
  createTweet(tweet: String!, consumer_key: String, consumer_secret: String, access_token_key: String, access_token_secret: String, created_at: String!): Tweet!
  
  # Delete User Tweet
  deleteTweet(tweet_id: String!, consumer_key: String, consumer_secret: String, access_token_key: String, access_token_secret: String): Tweet!
  
  # Retweet existing Tweet
  reTweet(tweet_id: String!, consumer_key: String, consumer_secret: String, access_token_key: String, access_token_secret: String): Tweet!
  
  # Update existing Tweet
  updateTweet(tweet_id: String!, tweet: String!): Tweet!
  
  # Create user info is available in dynamo integration
  updateUserInfo(location: String!, description: String!, name: String!, followers_count: Int!, friends_count: Int!, favourites_count: Int!, followers: [String!]!): User!
}

type Query {
  meInfo(consumer_key: String, consumer_secret: String): User!
  getUserInfo(handle: String!, consumer_key: String, consumer_secret: String): User!
  
  # search functionality is available in elasticsearch integration
  searchAllTweetsByKeyword(keyword: String!): TweetConnection
}

type Subscription {
  addTweet: Tweet @aws_subscribe(mutations: [\\"createTweet\\"])
}

type Tweet {
  tweet_id: String!
  tweet: String!
  retweeted: Boolean
  retweet_count: Int
  favorited: Boolean
  created_at: String!
}

type TweetConnection {
  items: [Tweet!]!
  nextToken: String
}

type User {
  name: String!
  handle: String!
  location: String!
  description: String!
  followers_count: Int!
  friends_count: Int!
  favourites_count: Int!
  followers: [String!]!
  topTweet: Tweet
  tweets(limit: Int!, nextToken: String): TweetConnection
  
  # search functionality is available in elasticsearch integration
  searchTweetsByKeyword(keyword: String!): TweetConnection
}

schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}",
    "substitutions": Object {},
    "xrayEnabled": false,
  },
]
`;

exports[`authenticationType can be missing when apiId is provided 1`] = `
Array [
  Object {
    "additionalAuthenticationProviders": Array [],
    "apiId": "testApiId",
    "authenticationType": undefined,
    "dataSources": Array [],
    "defaultMappingTemplates": Object {},
    "functionConfigurations": Array [],
    "functionConfigurationsLocation": "mapping-templates",
    "isSingleConfig": true,
    "mappingTemplates": Array [],
    "mappingTemplatesLocation": "mapping-templates",
    "name": "api",
    "region": "us-east-1",
    "schema": "type Mutation {
  
  # Create a tweet for a user
  # consumer keys and tokens are not required for dynamo integration
  createTweet(tweet: String!, consumer_key: String, consumer_secret: String, access_token_key: String, access_token_secret: String, created_at: String!): Tweet!
  
  # Delete User Tweet
  deleteTweet(tweet_id: String!, consumer_key: String, consumer_secret: String, access_token_key: String, access_token_secret: String): Tweet!
  
  # Retweet existing Tweet
  reTweet(tweet_id: String!, consumer_key: String, consumer_secret: String, access_token_key: String, access_token_secret: String): Tweet!
  
  # Update existing Tweet
  updateTweet(tweet_id: String!, tweet: String!): Tweet!
  
  # Create user info is available in dynamo integration
  updateUserInfo(location: String!, description: String!, name: String!, followers_count: Int!, friends_count: Int!, favourites_count: Int!, followers: [String!]!): User!
}

type Query {
  meInfo(consumer_key: String, consumer_secret: String): User!
  getUserInfo(handle: String!, consumer_key: String, consumer_secret: String): User!
  
  # search functionality is available in elasticsearch integration
  searchAllTweetsByKeyword(keyword: String!): TweetConnection
}

type Subscription {
  addTweet: Tweet @aws_subscribe(mutations: [\\"createTweet\\"])
}

type Tweet {
  tweet_id: String!
  tweet: String!
  retweeted: Boolean
  retweet_count: Int
  favorited: Boolean
  created_at: String!
}

type TweetConnection {
  items: [Tweet!]!
  nextToken: String
}

type User {
  name: String!
  handle: String!
  location: String!
  description: String!
  followers_count: Int!
  friends_count: Int!
  favourites_count: Int!
  followers: [String!]!
  topTweet: Tweet
  tweets(limit: Int!, nextToken: String): TweetConnection
  
  # search functionality is available in elasticsearch integration
  searchTweetsByKeyword(keyword: String!): TweetConnection
}

schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}",
    "substitutions": Object {},
    "xrayEnabled": false,
  },
]
`;

exports[`authenticationType is missing 1`] = `"appSync property \`authenticationType\` is missing or invalid."`;

exports[`authenticationType is missing 2`] = `"appSync property \`authenticationType\` is missing or invalid."`;

exports[`datasources as array 1`] = `
Array [
  Object {
    "additionalAuthenticationProviders": Array [],
    "authenticationType": "AWS_IAM",
    "dataSources": Array [
      Object {
        "name": "users",
        "type": "AMAZON_DYNAMODB",
      },
      Object {
        "name": "tweets",
        "type": "AMAZON_DYNAMODB",
      },
    ],
    "defaultMappingTemplates": Object {},
    "functionConfigurations": Array [],
    "functionConfigurationsLocation": "mapping-templates",
    "isSingleConfig": true,
    "mappingTemplates": Array [],
    "mappingTemplatesLocation": "mapping-templates",
    "name": "api",
    "region": "us-east-1",
    "schema": "type Mutation {
  
  # Create a tweet for a user
  # consumer keys and tokens are not required for dynamo integration
  createTweet(tweet: String!, consumer_key: String, consumer_secret: String, access_token_key: String, access_token_secret: String, created_at: String!): Tweet!
  
  # Delete User Tweet
  deleteTweet(tweet_id: String!, consumer_key: String, consumer_secret: String, access_token_key: String, access_token_secret: String): Tweet!
  
  # Retweet existing Tweet
  reTweet(tweet_id: String!, consumer_key: String, consumer_secret: String, access_token_key: String, access_token_secret: String): Tweet!
  
  # Update existing Tweet
  updateTweet(tweet_id: String!, tweet: String!): Tweet!
  
  # Create user info is available in dynamo integration
  updateUserInfo(location: String!, description: String!, name: String!, followers_count: Int!, friends_count: Int!, favourites_count: Int!, followers: [String!]!): User!
}

type Query {
  meInfo(consumer_key: String, consumer_secret: String): User!
  getUserInfo(handle: String!, consumer_key: String, consumer_secret: String): User!
  
  # search functionality is available in elasticsearch integration
  searchAllTweetsByKeyword(keyword: String!): TweetConnection
}

type Subscription {
  addTweet: Tweet @aws_subscribe(mutations: [\\"createTweet\\"])
}

type Tweet {
  tweet_id: String!
  tweet: String!
  retweeted: Boolean
  retweet_count: Int
  favorited: Boolean
  created_at: String!
}

type TweetConnection {
  items: [Tweet!]!
  nextToken: String
}

type User {
  name: String!
  handle: String!
  location: String!
  description: String!
  followers_count: Int!
  friends_count: Int!
  favourites_count: Int!
  followers: [String!]!
  topTweet: Tweet
  tweets(limit: Int!, nextToken: String): TweetConnection
  
  # search functionality is available in elasticsearch integration
  searchTweetsByKeyword(keyword: String!): TweetConnection
}

schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}",
    "substitutions": Object {},
    "xrayEnabled": false,
  },
]
`;

exports[`datasources as array form different files (array of arrays or objects) 1`] = `
Array [
  Object {
    "additionalAuthenticationProviders": Array [],
    "authenticationType": "AWS_IAM",
    "dataSources": Array [
      Object {
        "name": "users",
        "type": "AMAZON_DYNAMODB",
      },
      Object {
        "name": "tweets",
        "type": "AMAZON_DYNAMODB",
      },
      Object {
        "name": "foo",
        "type": "AMAZON_DYNAMODB",
      },
      Object {
        "name": "bar",
        "type": "AMAZON_DYNAMODB",
      },
    ],
    "defaultMappingTemplates": Object {},
    "functionConfigurations": Array [],
    "functionConfigurationsLocation": "mapping-templates",
    "isSingleConfig": true,
    "mappingTemplates": Array [],
    "mappingTemplatesLocation": "mapping-templates",
    "name": "api",
    "region": "us-east-1",
    "schema": "type Mutation {
  
  # Create a tweet for a user
  # consumer keys and tokens are not required for dynamo integration
  createTweet(tweet: String!, consumer_key: String, consumer_secret: String, access_token_key: String, access_token_secret: String, created_at: String!): Tweet!
  
  # Delete User Tweet
  deleteTweet(tweet_id: String!, consumer_key: String, consumer_secret: String, access_token_key: String, access_token_secret: String): Tweet!
  
  # Retweet existing Tweet
  reTweet(tweet_id: String!, consumer_key: String, consumer_secret: String, access_token_key: String, access_token_secret: String): Tweet!
  
  # Update existing Tweet
  updateTweet(tweet_id: String!, tweet: String!): Tweet!
  
  # Create user info is available in dynamo integration
  updateUserInfo(location: String!, description: String!, name: String!, followers_count: Int!, friends_count: Int!, favourites_count: Int!, followers: [String!]!): User!
}

type Query {
  meInfo(consumer_key: String, consumer_secret: String): User!
  getUserInfo(handle: String!, consumer_key: String, consumer_secret: String): User!
  
  # search functionality is available in elasticsearch integration
  searchAllTweetsByKeyword(keyword: String!): TweetConnection
}

type Subscription {
  addTweet: Tweet @aws_subscribe(mutations: [\\"createTweet\\"])
}

type Tweet {
  tweet_id: String!
  tweet: String!
  retweeted: Boolean
  retweet_count: Int
  favorited: Boolean
  created_at: String!
}

type TweetConnection {
  items: [Tweet!]!
  nextToken: String
}

type User {
  name: String!
  handle: String!
  location: String!
  description: String!
  followers_count: Int!
  friends_count: Int!
  favourites_count: Int!
  followers: [String!]!
  topTweet: Tweet
  tweets(limit: Int!, nextToken: String): TweetConnection
  
  # search functionality is available in elasticsearch integration
  searchTweetsByKeyword(keyword: String!): TweetConnection
}

schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}",
    "substitutions": Object {},
    "xrayEnabled": false,
  },
]
`;

exports[`returns valid config 1`] = `
Array [
  Object {
    "additionalAuthenticationProviders": Array [],
    "authenticationType": "AWS_IAM",
    "dataSources": Array [
      Object {
        "name": "users",
        "type": "AMAZON_DYNAMODB",
      },
      Object {
        "name": "tweets",
        "type": "AMAZON_DYNAMODB",
      },
    ],
    "defaultMappingTemplates": Object {},
    "functionConfigurations": Array [],
    "functionConfigurationsLocation": "mapping-templates",
    "isSingleConfig": true,
    "mappingTemplates": Array [],
    "mappingTemplatesLocation": "mapping-templates",
    "name": "api",
    "region": "us-east-1",
    "schema": "type Mutation {
  
  # Create a tweet for a user
  # consumer keys and tokens are not required for dynamo integration
  createTweet(tweet: String!, consumer_key: String, consumer_secret: String, access_token_key: String, access_token_secret: String, created_at: String!): Tweet!
  
  # Delete User Tweet
  deleteTweet(tweet_id: String!, consumer_key: String, consumer_secret: String, access_token_key: String, access_token_secret: String): Tweet!
  
  # Retweet existing Tweet
  reTweet(tweet_id: String!, consumer_key: String, consumer_secret: String, access_token_key: String, access_token_secret: String): Tweet!
  
  # Update existing Tweet
  updateTweet(tweet_id: String!, tweet: String!): Tweet!
  
  # Create user info is available in dynamo integration
  updateUserInfo(location: String!, description: String!, name: String!, followers_count: Int!, friends_count: Int!, favourites_count: Int!, followers: [String!]!): User!
}

type Query {
  meInfo(consumer_key: String, consumer_secret: String): User!
  getUserInfo(handle: String!, consumer_key: String, consumer_secret: String): User!
  
  # search functionality is available in elasticsearch integration
  searchAllTweetsByKeyword(keyword: String!): TweetConnection
}

type Subscription {
  addTweet: Tweet @aws_subscribe(mutations: [\\"createTweet\\"])
}

type Tweet {
  tweet_id: String!
  tweet: String!
  retweeted: Boolean
  retweet_count: Int
  favorited: Boolean
  created_at: String!
}

type TweetConnection {
  items: [Tweet!]!
  nextToken: String
}

type User {
  name: String!
  handle: String!
  location: String!
  description: String!
  followers_count: Int!
  friends_count: Int!
  favourites_count: Int!
  followers: [String!]!
  topTweet: Tweet
  tweets(limit: Int!, nextToken: String): TweetConnection
  
  # search functionality is available in elasticsearch integration
  searchTweetsByKeyword(keyword: String!): TweetConnection
}

schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}",
    "substitutions": Object {},
    "xrayEnabled": false,
  },
]
`;
